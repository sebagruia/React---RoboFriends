{"version":3,"sources":["reducers.js","components/ErrorBoundry.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPanding","robots","error","ErrorBoundry","props","state","hasError","info","this","setState","children","Component","Card","className","src","id","alt","name","email","Cardlist","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23659932.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n    } from './constants';\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField:action.payload};\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPanding: false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending:true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots:action.payload, isPending:false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error:action.payload, isPending:false};\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import React, {Component} from  'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOOps. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Card = (props)=>{ //Varianta cu destructurare direct ca parametru in functie\r\n// const Card = (props)=>{ Daca vreau sa folosesc \"props\" fara destructurarea de mai sus\r\n    // const {id, name, email} = props;  Asta e o varianta pentru destrcturare\r\n    return(\r\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './Cardlist.css';\r\n    \r\n\r\n\r\nconst Cardlist = ({robots})=>{\r\n    return(\r\n    <div className=\"card-list\">\r\n        {\r\n            robots.map((robot)=>{\r\n                return (<Card \r\n                    id={robot.id} \r\n                    name={robot.name}\r\n                    email={robot.email} \r\n                    key={robot.id}\r\n                    />\r\n                ); \r\n            })\r\n        }\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange})=>{\r\n\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search for robots\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props)=>{\r\nreturn (\r\n    <div className=\"scroll-component\">\r\n        {props.children}\r\n    </div>\r\n    \r\n\r\n\r\n);\r\n\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport {connect} from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport {setSearchField, requestRobots }from '../actions';\r\nimport './App.css'; \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots:state.requestRobots.robots,\r\n        isPending:state.requestRobots.isPanding,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispachToProps = (dispatch)=>{\r\n   return{\r\n    onSearchChange: (event) =>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=>dispatch(requestRobots()) \r\n   } \r\n} \r\n\r\nclass App extends Component {\r\n    // constructor(){\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: []\r\n    //     }\r\n    // }\r\n\r\n    // componentDidMount() {\r\n    //     fetch('https://jsonplaceholder.typicode.com/users')\r\n    //     .then(response=>response.json())\r\n    //     .then(users=>this.setState({robots:users}));\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\r\n     });\r\n\r\n     if(isPending){\r\n        return <h1>Loading</h1>\r\n     }\r\n     else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                    <Cardlist robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n                </Scroll>\r\n\r\n            </div>\r\n        );\r\n     }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n    } from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n// By adding Redux-Thunk, Redux can understand the bellow function that returns another function and not an Object as usual. Redux-Thung is aware of this return and gives acces to the \"dispach\" function.\r\nexport const requestRobots = () => (dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then((data)=>{\r\n            dispatch({type:REQUEST_ROBOTS_SUCCESS,\r\n                        payload:data\r\n            })\r\n        })\r\n        .catch((error)=>{\r\n            dispatch({\r\n                type:REQUEST_ROBOTS_FAILED,\r\n                payload:error\r\n            })\r\n        });\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n \r\n,document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}