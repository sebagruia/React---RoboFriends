{"version":3,"sources":["components/ErrorBoundry.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Card","className","src","id","alt","name","email","Cardlist","robots","map","robot","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAsBeA,E,YAnBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,UAAS,GAHC,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKL,MAAMO,a,GAhBCC,aCgBZC,EAfF,SAACT,GAGV,OACI,yBAAKU,UAAU,uDACX,yBAAKC,IAAG,+BAA0BX,EAAMY,GAAhC,YAA8CC,IAAI,WAC1D,6BACI,4BAAKb,EAAMc,MACX,2BAAId,EAAMe,UCcXC,G,MAnBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACb,OACF,yBAAKP,UAAU,aAEPO,EAAOC,IAAI,SAACC,GACR,OAAQ,kBAAC,EAAD,CACJP,GAAIO,EAAMP,GACVE,KAAMK,EAAML,KACZC,MAAOI,EAAMJ,MACbK,IAAKD,EAAMP,UCJhBS,EATE,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAE5B,OACI,yBAAKb,UAAU,OACX,2BAAOA,UAAU,mCAAmCc,KAAK,SAASC,YAAY,oBAAoBC,SAAUH,MCUzGI,G,MAbA,SAAC3B,GAChB,OACI,yBAAKU,UAAU,oBACVV,EAAMO,YCoDAqB,G,kBAjDX,aAAc,IAAD,8BACT,+CAcJC,eAAiB,SAACC,GACd,EAAKxB,SAAS,CAACgB,YAAYQ,EAAMC,OAAOC,SAdxC,EAAK/B,MAAQ,CACTgB,OAAQ,GACRK,YAAY,IAJP,E,iFAQQ,IAAD,OAChBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAE,EAAK/B,SAAS,CAACW,OAAOoB,Q,+BAU9B,IAAD,OACEC,EAAiBjC,KAAKJ,MAAMgB,OAAOsB,OAAO,SAAApB,GAC5C,OAAOA,EAAML,KAAK0B,cAAcC,SAAS,EAAKxC,MAAMqB,YAAYkB,iBAIvE,OAA8B,IAA3BnC,KAAKJ,MAAMgB,OAAOyB,OACX,uCAGH,yBAAKhC,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWa,aAAclB,KAAKwB,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUZ,OAAQqB,W,GArCpB9B,cCIEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACL,kBAAC,EAAD,MAEHC,SAASC,eAAe,SDqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.b03cb4e6.chunk.js","sourcesContent":["import React, {Component} from  'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n    \r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>OOOps. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Card = (props)=>{ //Varianta cu destructurare direct ca parametru in functie\r\n// const Card = (props)=>{ Daca vreau sa folosesc \"props\" fara destructurarea de mai sus\r\n    // const {id, name, email} = props;  Asta e o varianta pentru destrcturare\r\n    return(\r\n        <div className=\"bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './Cardlist.css';\r\n    \r\n\r\n\r\nconst Cardlist = ({robots})=>{\r\n      return(\r\n    <div className=\"card-list\">\r\n        {\r\n            robots.map((robot)=>{\r\n                return (<Card \r\n                    id={robot.id} \r\n                    name={robot.name}\r\n                    email={robot.email} \r\n                    key={robot.id}\r\n                    />\r\n                ); \r\n            })\r\n        }\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange})=>{\r\n\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search for robots\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props)=>{\r\nreturn (\r\n    <div className=\"scroll-component\">\r\n        {props.children}\r\n    </div>\r\n    \r\n\r\n\r\n);\r\n\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css'; \r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users=>this.setState({robots:users}));\r\n\r\n    }\r\n\r\n    onSearchChange = (event)=>{\r\n        this.setState({searchfield:event.target.value});\r\n     \r\n        \r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\r\n     });\r\n\r\n     if(this.state.robots.length===0){\r\n        return <h1>Loading</h1>\r\n     }else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBoundry>\r\n                    <Cardlist robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n                </Scroll>\r\n\r\n            </div>\r\n            \r\n        );\r\n     }\r\n       \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n    <App />\n \n,document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}